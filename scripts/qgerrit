#!/usr/bin/env python

# -*- coding: utf-8 -*-

# vim: tabstop=4 shiftwidth=4 softtabstop=4

#    Copyright (C) 2013 Yahoo! Inc. All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import json
import optparse
import os
import subprocess
import sys
import re

from datetime import datetime

import prettytable

GERRIT_HOST = 'review.openstack.org'
GERRIT_PORT = 29418
GERRIT_CMD = ('gerrit', 'query', '--format=JSON', "--current-patch-set", "--files")


def tiny_p(cmd, capture=True):
    # Borrowed from cloud-init...
    #
    # Darn python 2.6 doesn't have check_output (argggg)
    stdout = subprocess.PIPE
    stderr = subprocess.PIPE
    if not capture:
        stdout = None
        stderr = None
    sp = subprocess.Popen(cmd, stdout=stdout,
                          stderr=stderr, stdin=None)
    (out, err) = sp.communicate()
    ret = sp.returncode  # pylint: disable=E1101
    if ret not in [0]:
        raise RuntimeError("Failed running %s [rc=%s] (%s, %s)"
                           % (cmd, ret, out, err))
    return (out, err)


def run_query(loginname, query, keyfile):
    cmd = ['ssh']
    if keyfile and os.path.isfile(keyfile):
        cmd.extend(['-i', str(keyfile)])
    if loginname is not None:
        BASE_CMD_OPTS = (loginname+'@'+GERRIT_HOST, '-p', str(GERRIT_PORT))
    else:
        BASE_CMD_OPTS = (GERRIT_HOST, '-p', str(GERRIT_PORT))
    cmd.extend(BASE_CMD_OPTS)
    cmd.extend(GERRIT_CMD)
    cmd.append(query)
    (stdout, _stderr) = tiny_p(cmd)
    entries = stdout.splitlines()
    results = []
    for e in entries:
        dec = json.loads(e)
        if 'rowCount' in dec:
            continue
        results.append(dec)
    return results


def _get_key(k, row):
    if k not in row:
        return ""
    v = str(row[k])
    if v is None:
        return ""
    return v


def print_wrapped(text):
    print("-" * (len(text)))
    print(text)
    print("-" * (len(text)))


def _get_date(k, row):
    v = _get_key(k, row)
    if not v:
        return ''
    try:
        dt = datetime.fromtimestamp(int(v))
        return dt.strftime('%I:%M %p %m/%d/%y')
    except (TypeError, ValueError):
        return ''

def _get_approvals(k, row):
    approvals = row["currentPatchSet"].get("approvals", [])
    vals = {}
    for approval in approvals:
        gottype = approval["type"][0:1].lower()
        if gottype not in vals:
            vals[gottype] = []
        vals[gottype].append(approval["value"])

    keys = vals.keys()
    keys.sort(reverse=True)
    return " ".join(map(lambda val: "%s=%s" % (val, ",".join(vals[val])), keys))

allfields = [
    { 'key': "status", 'label': "Status", 'mapfunc': _get_key },
    { 'key': "topic", 'label': "Topic", 'mapfunc': _get_key, "truncate": 20 },
    { 'key': "url", 'label': "URL", 'mapfunc': _get_key },
    { 'key': "project", 'label': "Project", 'mapfunc': _get_key },
    { 'key': "subject", 'label': "Subject", 'mapfunc': _get_key, "truncate": 50 },
    { 'key': "createdOn", 'label': "Created", 'mapfunc': _get_date },
    { 'key': "lastUpdated",'label': "Updated", 'mapfunc': _get_date },
    { 'key': "approvals", 'label': "Approvals", 'mapfunc': _get_approvals },
]


def print_results(results, fields):
    headers = map(lambda field: field["label"], fields)
    table = prettytable.PrettyTable(headers)
    table.padding_width = 1
    table.align = "l"
    num_seen = set()
    for res in results:
        try:
            num = int(res['number'])
        except (ValueError, TypeError, KeyError):
            num = -1
        if num < 0:
            continue
        if num in num_seen:
            continue

        num_seen.add(num)

        row = []
        for field in fields:
            func = field["mapfunc"]
            val = func(field["key"], res)
            if "truncate" in field:
                maxlen = field["truncate"]
                if len(val) > maxlen:
                    val = val[0:maxlen] + "..."
            row.append(val)
        table.add_row(row)

    if len(num_seen):
        print(table.get_string())

def matches_file(result, files):
    for filere in files:
        for fileentry in result["currentPatchSet"]["files"]:
            filename = fileentry["file"]
            if re.search(filere, filename):
                return True
    return False

#
# approval == vN - verification passed value N
# approval == cN - code review passed value N
#
def matches_approval(result, approval):
    rules = approval.split(",")
    requires = {}

    for rule in rules:
        requires[rule[0:1]] = int(rule[1:])

    got = {}
    for approval in result["currentPatchSet"].get("approvals", []):
        gottype = approval["type"][0:1].lower()
        gotval = int(approval["value"])
        # Record lowest flag value
        if gottype not in got or got[gottype] > gotval:
            got[gottype] = gotval

    for rule in requires.keys():
        if rule not in got:
            return False
        if got[rule] < requires[rule]:
            return False

    return True
        

def get_info(loginname, keyfile, terms, approval, files):
    clauses = []
    for term in terms:
        if len(terms[term]) == 0:
            continue

        clause = " OR ".join(map(lambda value: "%s:%s" % (term, value), terms[term]))
        if clause != "":
            clauses.append(clause)
    query = " AND ".join(map(lambda clause: "(%s)" % clause, clauses))
    results = run_query(loginname, query, keyfile)
    if files is not None and len(files) > 0:
        results = filter(lambda result: matches_file(result, files), results)
    if approval is not None:
        results = filter(lambda result: matches_approval(result, approval), results)
    return results


def _get_key_path():
    home_dir = os.path.expanduser("~")
    ssh_dir = os.path.join(home_dir, ".ssh")
    if not os.path.isdir(ssh_dir):
        return None
    for k in ('id_rsa', 'id_dsa'):
        path = os.path.join(ssh_dir, k)
        if os.path.isfile(path):
            return path
    return None

def valid_field(name, fields):
    for field in fields:
        if field["key"] == name:
            return True
    return False

def sort_results(results, key, reverse):
    return sorted(results, key=lambda result: result[key], reverse=reverse)


def main():
    allfieldslist = map(lambda field: field["key"], allfields)
    allfieldsstr = ", ".join(map(lambda field: field["key"], allfields))

    parser = optparse.OptionParser()
    parser.add_option("-l", "--login", dest="login", action='store',
                      help="connect to gerrit with USER", metavar="USER")
    parser.add_option("-u", "--user", dest="users", action='append',
                      help="gather information on given USER", metavar="USER",
                      default=[])
    parser.add_option("-s", "--status", dest="statuses", action='append',
                      help="gather information on given status", metavar="STATUS",
                      default=[])
    parser.add_option("-m", "--message", dest="messages", action='append',
                      help="filter on message", metavar="MESSAGE",
                      default=[])
    parser.add_option("-p", "--project", dest="projects", action='append',
                      help="gather information on given project", metavar="PROJECT",
                      default=[])
    parser.add_option("-a", "--approval", dest="approval", action="store",
                      help="filter on approval value min %n [default: no filter]",
                      metavar="APPROVAL", default=None)
    parser.add_option("-k", "--keyfile", dest="keyfile", action='store',
                      help="gerrit ssh keyfile [default: %default]",
                      metavar="FILE", default=_get_key_path())
    parser.add_option("-t", "--sort", dest="sort", action='store',
                      help="sort order for results [default: createdOn]",
                      metavar="SORT", default="createdOn")
    parser.add_option("-f", "--field", dest="fields", action='append',
                      help="display field in results [default: %s]" % allfieldsstr,
                      metavar="FIELD", default=[])
    (options, args) = parser.parse_args()

    if len(options.statuses) == 0:
        options.statuses = ["open"]

    if len(options.fields) == 0:
        fields = allfields
    else:
        trunc = {}
        fieldnames = []
        for name in options.fields:
            offset = name.find(":")
            if offset != -1:
                val = int(name[offset + 1:])
                name = name[0:offset]
                trunc[name] = val
            fieldnames.append(name)

        if not valid_field(name, allfields):
            print >>sys.stderr, "Invalid valid name '%s', valid otions: %s" % (name, allfieldsstr)
            sys.exit(1)

        fields = []
        for field in allfields:
            if field["key"] not in fieldnames:
                continue
            if field["key"] in trunc:
                field["truncate"] = trunc[field["key"]]
            fields.append(field)

    sort = "createdOn"
    reverse = False
    if options.sort is not None:
        offset = options.sort.find(":")
        if offset != -1:
            direction = options.sort[offset + 1:]
            if direction == "rev":
                reverse = True
            name = options.sort[0:offset]
        else:
            name = options.sort

        if not valid_field(name, fields):
            print >>sys.stderr, "Invalid sort key '%s', valid otions: %s" % (name, allfieldsstr)
            sys.exit(1)
        sort = name


    entries = get_info(options.login,
                       options.keyfile,
                       { "owner": list(options.users),
                         "status": options.statuses,
                         'message': options.messages,
                         'project': options.projects },
                       options.approval,
                       args)
    entries = sort_results(entries, sort, reverse)
    print_results(entries, fields)


if __name__ == '__main__':
    main()
